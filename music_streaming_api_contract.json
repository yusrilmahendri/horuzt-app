{
  "apiName": "Music Streaming API",
  "version": "1.0.0",
  "description": "Professional music streaming API with Range header support for wedding invitations and user management",
  "baseUrl": "https://your-domain.com/api",
  "authentication": {
    "type": "Bearer Token (Laravel Sanctum)",
    "header": "Authorization: Bearer {token}",
    "note": "Some endpoints support public access for wedding invitations"
  },
  "endpoints": {
    "public": {
      "streamMusicPublic": {
        "method": "GET",
        "path": "/v1/music/stream/public",
        "description": "Stream music file for public access (wedding invitations)",
        "authentication": "None (Public access)",
        "parameters": {
          "query": {
            "id": {
              "type": "integer",
              "required": true,
              "description": "Setting ID containing the music file",
              "example": 123
            }
          },
          "headers": {
            "Range": {
              "type": "string",
              "required": false,
              "description": "HTTP Range header for partial content streaming",
              "example": "bytes=0-1023"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full music file stream",
            "contentType": "audio/mpeg | audio/wav | audio/ogg | audio/m4a",
            "headers": {
              "Content-Type": "audio/mpeg",
              "Content-Length": "file_size_bytes",
              "Accept-Ranges": "bytes",
              "Cache-Control": "public, max-age=3600",
              "Content-Disposition": "inline"
            }
          },
          "206": {
            "description": "Partial content stream (Range request)",
            "contentType": "audio/mpeg | audio/wav | audio/ogg | audio/m4a",
            "headers": {
              "Content-Type": "audio/mpeg",
              "Content-Length": "partial_content_length",
              "Content-Range": "bytes start-end/total_size",
              "Accept-Ranges": "bytes",
              "Cache-Control": "public, max-age=3600",
              "Content-Disposition": "inline"
            }
          },
          "404": {
            "description": "Music file not found",
            "example": {
              "message": "No music file associated with this setting."
            }
          },
          "416": {
            "description": "Range not satisfiable",
            "example": {
              "message": "Invalid range request."
            }
          },
          "422": {
            "description": "Validation error",
            "example": {
              "message": "Invalid ID provided",
              "errors": {
                "id": ["Setting ID is required."]
              }
            }
          }
        },
        "example": {
          "request": "GET /v1/music/stream/public?id=123",
          "headers": {
            "Range": "bytes=0-1023"
          },
          "response": "Binary audio stream data"
        }
      }
    },
    "authenticated": {
      "uploadMusic": {
        "method": "POST",
        "path": "/music/upload",
        "description": "Upload music file for authenticated user",
        "authentication": "Required",
        "parameters": {
          "form": {
            "musik": {
              "type": "file",
              "required": true,
              "description": "Music file (MP3, WAV, OGG, M4A)",
              "maxSize": "10MB",
              "allowedTypes": ["audio/mpeg", "audio/wav", "audio/ogg", "audio/mp4"]
            }
          }
        },
        "responses": {
          "200": {
            "description": "Music file uploaded successfully",
            "example": {
              "message": "Music file uploaded successfully.",
              "setting": {
                "id": 123,
                "user_id": 456,
                "musik": "public/music/1234567890_song.mp3",
                "created_at": "2024-01-15T10:30:00Z",
                "updated_at": "2024-01-15T10:30:00Z"
              },
              "music_info": {
                "file_name": "1234567890_song.mp3",
                "file_size": 3145728,
                "mime_type": "audio/mpeg",
                "url": "/storage/music/1234567890_song.mp3",
                "last_modified": 1705312200
              }
            }
          },
          "422": {
            "description": "Validation error",
            "example": {
              "message": "Validation failed",
              "errors": {
                "musik": ["Music file must be in MP3, WAV, OGG, or M4A format."]
              }
            }
          },
          "500": {
            "description": "Server error",
            "example": {
              "message": "Failed to upload music file."
            }
          }
        }
      },
      "streamMusic": {
        "method": "GET",
        "path": "/music/stream",
        "description": "Stream music file for authenticated user",
        "authentication": "Required",
        "parameters": {
          "query": {
            "id": {
              "type": "integer",
              "required": true,
              "description": "Setting ID containing the music file",
              "example": 123
            }
          },
          "headers": {
            "Range": {
              "type": "string",
              "required": false,
              "description": "HTTP Range header for partial content streaming",
              "example": "bytes=0-1023"
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full music file stream",
            "contentType": "audio/mpeg | audio/wav | audio/ogg | audio/m4a"
          },
          "206": {
            "description": "Partial content stream (Range request)",
            "contentType": "audio/mpeg | audio/wav | audio/ogg | audio/m4a"
          },
          "403": {
            "description": "Unauthorized access",
            "example": {
              "message": "Unauthorized access to this resource."
            }
          },
          "404": {
            "description": "Music file not found",
            "example": {
              "message": "No music file associated with this setting."
            }
          }
        }
      },
      "downloadMusic": {
        "method": "GET",
        "path": "/music/download",
        "description": "Download music file for authenticated user",
        "authentication": "Required",
        "parameters": {
          "query": {
            "id": {
              "type": "integer",
              "required": true,
              "description": "Setting ID containing the music file",
              "example": 123
            }
          }
        },
        "responses": {
          "200": {
            "description": "Music file download",
            "contentType": "audio/mpeg | audio/wav | audio/ogg | audio/m4a",
            "headers": {
              "Content-Disposition": "attachment; filename=\"song.mp3\""
            }
          },
          "403": {
            "description": "Unauthorized access",
            "example": {
              "message": "Unauthorized access to this resource."
            }
          },
          "404": {
            "description": "Music file not found",
            "example": {
              "message": "No music file associated with this setting."
            }
          }
        }
      },
      "deleteMusic": {
        "method": "DELETE",
        "path": "/music/delete",
        "description": "Delete music file for authenticated user",
        "authentication": "Required",
        "responses": {
          "200": {
            "description": "Music file deleted successfully",
            "example": {
              "message": "Music file deleted successfully.",
              "setting": {
                "id": 123,
                "user_id": 456,
                "musik": null,
                "created_at": "2024-01-15T10:30:00Z",
                "updated_at": "2024-01-15T10:35:00Z"
              }
            }
          },
          "404": {
            "description": "No music file to delete",
            "example": {
              "message": "No music file to delete."
            }
          },
          "500": {
            "description": "Server error",
            "example": {
              "message": "Failed to delete music file."
            }
          }
        }
      },
      "getMusicInfo": {
        "method": "GET",
        "path": "/music/info",
        "description": "Get music file information for authenticated user",
        "authentication": "Required",
        "responses": {
          "200": {
            "description": "Music information retrieved successfully",
            "example": {
              "message": "Music information retrieved successfully.",
              "music_info": {
                "file_name": "1234567890_song.mp3",
                "file_size": 3145728,
                "mime_type": "audio/mpeg",
                "url": "/storage/music/1234567890_song.mp3",
                "last_modified": 1705312200
              },
              "setting": {
                "id": 123,
                "user_id": 456,
                "musik": "public/music/1234567890_song.mp3",
                "created_at": "2024-01-15T10:30:00Z",
                "updated_at": "2024-01-15T10:30:00Z"
              }
            }
          },
          "404": {
            "description": "No music file found",
            "example": {
              "message": "No music file found."
            }
          }
        }
      }
    },
    "legacy": {
      "note": "Legacy endpoints maintained for backward compatibility",
      "endpoints": {
        "legacyUpload": {
          "method": "POST",
          "path": "/v1/user/settings/music",
          "description": "Legacy upload endpoint (use /music/upload instead)",
          "status": "deprecated"
        },
        "legacyStream": {
          "method": "GET",
          "path": "/v1/user/music/stream",
          "description": "Legacy stream endpoint (use /music/stream instead)",
          "status": "deprecated"
        },
        "legacyDownload": {
          "method": "GET",
          "path": "/v1/user/music/download",
          "description": "Legacy download endpoint (use /music/download instead)",
          "status": "deprecated"
        },
        "legacyDelete": {
          "method": "DELETE",
          "path": "/v1/user/music/delete",
          "description": "Legacy delete endpoint (use /music/delete instead)",
          "status": "deprecated"
        }
      }
    }
  },
  "implementation": {
    "frontend": {
      "streamingExample": {
        "htmlAudioPlayer": {
          "description": "HTML5 audio player with streaming support",
          "code": "<audio controls preload=\"none\" id=\"wedding-music\">\n  <source src=\"/api/v1/music/stream/public?id=123\" type=\"audio/mpeg\">\n  Your browser does not support the audio element.\n</audio>"
        },
        "javascriptStreaming": {
          "description": "JavaScript implementation with Range header support",
          "code": "// Progressive streaming with Range headers\nconst audio = new Audio();\naudio.src = '/api/v1/music/stream/public?id=123';\naudio.preload = 'none';\naudio.controls = true;\n\n// Handle streaming events\naudio.addEventListener('loadstart', () => {\n  console.log('Stream started');\n});\n\naudio.addEventListener('progress', (e) => {\n  const buffered = audio.buffered;\n  if (buffered.length > 0) {\n    const percent = (buffered.end(0) / audio.duration) * 100;\n    console.log(`Buffered: ${percent}%`);\n  }\n});\n\n// Manual Range request for custom streaming\nfetch('/api/v1/music/stream/public?id=123', {\n  headers: {\n    'Range': 'bytes=0-1023'\n  }\n}).then(response => {\n  // Handle partial content\n  console.log('Status:', response.status); // 206 for partial content\n  console.log('Content-Range:', response.headers.get('Content-Range'));\n});"
        },
        "reactExample": {
          "description": "React component for music streaming",
          "code": "import React, { useState, useRef } from 'react';\n\nconst MusicPlayer = ({ settingId, isPublic = false }) => {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const audioRef = useRef(null);\n\n  const streamUrl = isPublic \n    ? `/api/v1/music/stream/public?id=${settingId}`\n    : `/api/music/stream?id=${settingId}`;\n\n  const handlePlay = () => {\n    audioRef.current.play();\n    setIsPlaying(true);\n  };\n\n  const handlePause = () => {\n    audioRef.current.pause();\n    setIsPlaying(false);\n  };\n\n  const handleTimeUpdate = () => {\n    setCurrentTime(audioRef.current.currentTime);\n  };\n\n  const handleLoadedMetadata = () => {\n    setDuration(audioRef.current.duration);\n  };\n\n  return (\n    <div className=\"music-player\">\n      <audio\n        ref={audioRef}\n        src={streamUrl}\n        onTimeUpdate={handleTimeUpdate}\n        onLoadedMetadata={handleLoadedMetadata}\n        preload=\"none\"\n      />\n      \n      <button onClick={isPlaying ? handlePause : handlePlay}>\n        {isPlaying ? 'Pause' : 'Play'}\n      </button>\n      \n      <div className=\"progress-bar\">\n        <div \n          className=\"progress\" \n          style={{ width: `${(currentTime / duration) * 100}%` }}\n        />\n      </div>\n      \n      <span>{Math.floor(currentTime)}s / {Math.floor(duration)}s</span>\n    </div>\n  );\n};\n\nexport default MusicPlayer;"
        }
      },
      "authentication": {
        "description": "Authentication setup for protected endpoints",
        "code": "// Set up Axios with authentication\nimport axios from 'axios';\n\nconst api = axios.create({\n  baseURL: '/api',\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  }\n});\n\n// Add auth token to requests\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Upload music file\nconst uploadMusic = async (file) => {\n  const formData = new FormData();\n  formData.append('musik', file);\n  \n  try {\n    const response = await api.post('/music/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Upload failed:', error.response.data);\n    throw error;\n  }\n};"
      },
      "errorHandling": {
        "description": "Error handling best practices",
        "code": "const handleMusicStream = async (settingId) => {\n  try {\n    const response = await fetch(`/api/v1/music/stream/public?id=${settingId}`);\n    \n    switch (response.status) {\n      case 200:\n      case 206:\n        // Success - handle stream\n        return response;\n      case 404:\n        console.error('Music file not found');\n        // Show user-friendly message\n        showNotification('Music not available', 'error');\n        break;\n      case 416:\n        console.error('Invalid range request');\n        // Retry without range header\n        return fetch(`/api/v1/music/stream/public?id=${settingId}`);\n      case 422:\n        console.error('Invalid setting ID');\n        showNotification('Invalid music reference', 'error');\n        break;\n      default:\n        console.error('Unexpected error:', response.status);\n        showNotification('Unable to load music', 'error');\n    }\n  } catch (error) {\n    console.error('Network error:', error);\n    showNotification('Network error occurred', 'error');\n  }\n};"
      }
    },
    "performance": {
      "rangeSupportBenefits": [
        "Reduces initial load time by loading audio progressively",
        "Enables seeking without downloading entire file",
        "Better user experience on slow connections",
        "Reduces server bandwidth usage",
        "Supports resumable downloads"
      ],
      "cachingStrategy": {
        "description": "Server sets appropriate cache headers for music files",
        "headers": {
          "Cache-Control": "public, max-age=3600",
          "ETag": "Generated based on file modification time",
          "Last-Modified": "File modification timestamp"
        }
      },
      "chunkedStreaming": {
        "description": "Music files are streamed in 8KB chunks for optimal performance",
        "chunkSize": "8192 bytes",
        "benefit": "Prevents memory issues with large audio files"
      }
    }
  },
  "security": {
    "publicAccess": {
      "description": "Public streaming endpoint allows access to wedding invitation music without authentication",
      "considerations": [
        "Setting ID validation prevents unauthorized file access",
        "No user information is exposed",
        "Files are served with appropriate content-type headers",
        "Rate limiting should be implemented at server level"
      ]
    },
    "authenticatedAccess": {
      "description": "Protected endpoints ensure users can only access their own music files",
      "features": [
        "User ownership validation",
        "Sanctum token authentication",
        "File access logging",
        "Secure file deletion"
      ]
    },
    "fileValidation": {
      "description": "Uploaded files are validated for security",
      "checks": [
        "MIME type validation",
        "File extension verification",
        "File size limits (10MB)",
        "Audio format verification"
      ]
    }
  },
  "testing": {
    "manualTesting": [
      {
        "test": "Upload audio file",
        "endpoint": "POST /music/upload",
        "expected": "File uploaded successfully with music_info returned"
      },
      {
        "test": "Stream with Range header",
        "endpoint": "GET /v1/music/stream/public?id=123",
        "headers": "Range: bytes=0-1023",
        "expected": "206 status with partial content"
      },
      {
        "test": "Stream full file",
        "endpoint": "GET /v1/music/stream/public?id=123",
        "expected": "200 status with full audio stream"
      },
      {
        "test": "Invalid setting ID",
        "endpoint": "GET /v1/music/stream/public?id=999999",
        "expected": "422 validation error"
      },
      {
        "test": "Unauthorized access",
        "endpoint": "GET /music/stream?id=123",
        "auth": "Different user token",
        "expected": "403 Forbidden"
      }
    ]
  }
}