{
  "api_documentation": {
    "title": "Wedding Dashboard Analytics API Documentation",
    "version": "1.0.0",
    "base_url": "http://127.0.0.1:8000/api",
    "description": "Dashboard analytics endpoints for wedding statistics, trends, and visitor messages",
    "auth_required": "Bearer Token Required (role: user)",
    "content_type": "application/json",
    "endpoints": {
      "dashboard_overview": {
        "method": "GET",
        "url": "/v1/dashboard/overview/{user_id}",
        "description": "Get comprehensive dashboard overview with metrics cards and summary",
        "authentication": "Required (Bearer Token)",
        "parameters": {
          "user_id": {
            "type": "integer",
            "required": true,
            "location": "path",
            "description": "Wedding owner's user ID",
            "example": 4,
            "validation": "Must be numeric"
          },
          "period": {
            "type": "string",
            "required": false,
            "location": "query",
            "enum": ["7d", "30d", "90d", "1y"],
            "default": "30d",
            "description": "Time period for analytics",
            "example": "30d"
          },
          "start_date": {
            "type": "string",
            "required": false,
            "location": "query",
            "format": "YYYY-MM-DD",
            "description": "Custom start date (overrides period)",
            "example": "2025-08-01"
          },
          "end_date": {
            "type": "string",
            "required": false,
            "location": "query",
            "format": "YYYY-MM-DD",
            "description": "Custom end date (overrides period)",
            "example": "2025-08-30"
          }
        },
        "responses": {
          "200": {
            "description": "Dashboard overview retrieved successfully",
            "example": {
              "data": {
                "metrics": {
                  "pengunjung": {
                    "total": 125,
                    "growth": 15.2,
                    "growth_direction": "up",
                    "description": "Total visitors to wedding invitation"
                  },
                  "kehadiran": {
                    "total": 98,
                    "growth": 12.5,
                    "growth_direction": "up",
                    "description": "Confirmed attendees"
                  },
                  "pesan": {
                    "total": 125,
                    "growth": 15.2,
                    "growth_direction": "up",
                    "description": "Wedding wishes messages"
                  },
                  "hadiah": {
                    "total": 0,
                    "growth": 0,
                    "growth_direction": "neutral",
                    "description": "Digital gifts received"
                  }
                },
                "summary": {
                  "period": "30d",
                  "period_label": "Last 30 Days",
                  "start_date": "2025-08-01",
                  "end_date": "2025-08-30",
                  "top_performing_metric": "pengunjung",
                  "total_interactions": 223
                },
                "quick_stats": {
                  "attendance_rate": 78.4,
                  "response_rate": 100.0,
                  "most_active_day": "2025-08-25",
                  "peak_hour": "14:00"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "403": {
            "description": "Forbidden - Access denied",
            "example": {
              "message": "Access denied. You can only view your own dashboard."
            }
          },
          "404": {
            "description": "User not found",
            "example": {
              "message": "User not found."
            }
          },
          "500": {
            "description": "Server error",
            "example": {
              "message": "Failed to retrieve dashboard overview.",
              "error": "Internal server error"
            }
          }
        },
        "example_request": {
          "curl": "curl -X GET 'http://127.0.0.1:8000/api/v1/dashboard/overview/4?period=30d' \\\n  -H 'Authorization: Bearer your_token_here' \\\n  -H 'Accept: application/json'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/dashboard/overview/4?period=30d', {\n  headers: {\n    'Authorization': 'Bearer ' + token,\n    'Accept': 'application/json'\n  }\n});\nconst data = await response.json();"
        }
      },
      "dashboard_trends": {
        "method": "GET",
        "url": "/v1/dashboard/trends/{user_id}",
        "description": "Get time-series trend data for charts and analytics",
        "authentication": "Required (Bearer Token)",
        "parameters": {
          "user_id": {
            "type": "integer",
            "required": true,
            "location": "path",
            "description": "Wedding owner's user ID",
            "example": 4,
            "validation": "Must be numeric"
          },
          "period": {
            "type": "string",
            "required": false,
            "location": "query",
            "enum": ["7d", "30d", "90d", "1y"],
            "default": "7d",
            "description": "Time period for trend analysis",
            "example": "7d"
          },
          "metric": {
            "type": "string",
            "required": false,
            "location": "query",
            "enum": ["all", "pengunjung", "kehadiran", "pesan"],
            "default": "all",
            "description": "Specific metric to analyze",
            "example": "all"
          },
          "granularity": {
            "type": "string",
            "required": false,
            "location": "query",
            "enum": ["hour", "day", "week", "month"],
            "default": "day",
            "description": "Data granularity for chart",
            "example": "day"
          }
        },
        "responses": {
          "200": {
            "description": "Trend data retrieved successfully",
            "example": {
              "data": {
                "period": "7d",
                "granularity": "day",
                "trends": [
                  {
                    "date": "2025-08-24",
                    "pengunjung": 15,
                    "kehadiran": 12,
                    "pesan": 15,
                    "hadiah": 0
                  },
                  {
                    "date": "2025-08-25",
                    "pengunjung": 23,
                    "kehadiran": 18,
                    "pesan": 23,
                    "hadiah": 0
                  },
                  {
                    "date": "2025-08-26",
                    "pengunjung": 18,
                    "kehadiran": 14,
                    "pesan": 18,
                    "hadiah": 0
                  },
                  {
                    "date": "2025-08-27",
                    "pengunjung": 12,
                    "kehadiran": 9,
                    "pesan": 12,
                    "hadiah": 0
                  },
                  {
                    "date": "2025-08-28",
                    "pengunjung": 21,
                    "kehadiran": 17,
                    "pesan": 21,
                    "hadiah": 0
                  },
                  {
                    "date": "2025-08-29",
                    "pengunjung": 19,
                    "kehadiran": 15,
                    "pesan": 19,
                    "hadiah": 0
                  },
                  {
                    "date": "2025-08-30",
                    "pengunjung": 17,
                    "kehadiran": 13,
                    "pesan": 17,
                    "hadiah": 0
                  }
                ],
                "summary": {
                  "total_days": 7,
                  "peak_day": "2025-08-25",
                  "peak_value": 23,
                  "average_daily": 17.86,
                  "trend_direction": "stable"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "500": {
            "description": "Server error",
            "example": {
              "message": "Failed to retrieve trend data.",
              "error": "Internal server error"
            }
          }
        },
        "example_request": {
          "curl": "curl -X GET 'http://127.0.0.1:8000/api/v1/dashboard/trends/4?period=7d&granularity=day' \\\n  -H 'Authorization: Bearer your_token_here' \\\n  -H 'Accept: application/json'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/dashboard/trends/4?period=7d&granularity=day', {\n  headers: {\n    'Authorization': 'Bearer ' + token,\n    'Accept': 'application/json'\n  }\n});\nconst data = await response.json();"
        }
      },
      "dashboard_messages": {
        "method": "GET",
        "url": "/v1/dashboard/messages/{user_id}",
        "description": "Get recent wedding messages and wishes with pagination",
        "authentication": "Required (Bearer Token)",
        "parameters": {
          "user_id": {
            "type": "integer",
            "required": true,
            "location": "path",
            "description": "Wedding owner's user ID",
            "example": 4,
            "validation": "Must be numeric"
          },
          "page": {
            "type": "integer",
            "required": false,
            "location": "query",
            "default": 1,
            "description": "Page number for pagination",
            "example": 1
          },
          "per_page": {
            "type": "integer",
            "required": false,
            "location": "query",
            "default": 10,
            "min": 1,
            "max": 50,
            "description": "Number of messages per page",
            "example": 10
          },
          "filter": {
            "type": "string",
            "required": false,
            "location": "query",
            "enum": ["all", "hadir", "tidak_hadir", "mungkin"],
            "default": "all",
            "description": "Filter by attendance status",
            "example": "all"
          },
          "search": {
            "type": "string",
            "required": false,
            "location": "query",
            "description": "Search in guest names or messages",
            "example": "John"
          },
          "sort": {
            "type": "string",
            "required": false,
            "location": "query",
            "enum": ["newest", "oldest", "name_asc", "name_desc"],
            "default": "newest",
            "description": "Sort order for messages",
            "example": "newest"
          }
        },
        "responses": {
          "200": {
            "description": "Messages retrieved successfully",
            "example": {
              "data": {
                "messages": [
                  {
                    "id": 15,
                    "nama": "John Doe",
                    "kehadiran": "hadir",
                    "kehadiran_label": "Akan Hadir",
                    "pesan": "Selamat menempuh hidup baru! Semoga bahagia selalu dan berkah.",
                    "created_at": "2025-08-30 10:30:45",
                    "created_at_human": "2 hours ago"
                  },
                  {
                    "id": 14,
                    "nama": "Jane Smith",
                    "kehadiran": "tidak_hadir",
                    "kehadiran_label": "Tidak Hadir",
                    "pesan": "Maaf tidak bisa hadir karena ada kepentingan, tapi selamat ya!",
                    "created_at": "2025-08-30 09:15:30",
                    "created_at_human": "3 hours ago"
                  },
                  {
                    "id": 13,
                    "nama": "Bob Wilson",
                    "kehadiran": "mungkin",
                    "kehadiran_label": "Mungkin Hadir",
                    "pesan": "Akan diusahakan hadir. Selamat untuk kalian berdua!",
                    "created_at": "2025-08-30 08:45:12",
                    "created_at_human": "4 hours ago"
                  }
                ],
                "pagination": {
                  "current_page": 1,
                  "per_page": 10,
                  "total": 125,
                  "last_page": 13,
                  "from": 1,
                  "to": 10,
                  "has_more": true
                },
                "summary": {
                  "total_messages": 125,
                  "filtered_count": 125,
                  "attendance_breakdown": {
                    "hadir": 98,
                    "tidak_hadir": 20,
                    "mungkin": 7
                  }
                },
                "filters_applied": {
                  "filter": "all",
                  "search": null,
                  "sort": "newest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "500": {
            "description": "Server error",
            "example": {
              "message": "Failed to retrieve messages.",
              "error": "Internal server error"
            }
          }
        },
        "example_request": {
          "curl": "curl -X GET 'http://127.0.0.1:8000/api/v1/dashboard/messages/4?page=1&per_page=10&filter=all' \\\n  -H 'Authorization: Bearer your_token_here' \\\n  -H 'Accept: application/json'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/dashboard/messages/4?page=1&per_page=10&filter=all', {\n  headers: {\n    'Authorization': 'Bearer ' + token,\n    'Accept': 'application/json'\n  }\n});\nconst data = await response.json();"
        }
      }
    },
    "data_types": {
      "attendance_status": {
        "description": "Guest attendance status options",
        "values": {
          "hadir": "Will attend (Akan Hadir)",
          "tidak_hadir": "Will not attend (Tidak Hadir)",
          "mungkin": "Maybe will attend (Mungkin Hadir)"
        }
      },
      "growth_direction": {
        "description": "Metric growth trend indicators",
        "values": {
          "up": "Positive growth",
          "down": "Negative growth",
          "neutral": "No significant change"
        }
      },
      "time_periods": {
        "description": "Available analytics time periods",
        "values": {
          "7d": "Last 7 days",
          "30d": "Last 30 days",
          "90d": "Last 90 days",
          "1y": "Last 1 year"
        }
      }
    },
    "authentication": {
      "type": "Bearer Token",
      "header": "Authorization: Bearer {token}",
      "description": "All dashboard endpoints require authentication with user role",
      "token_format": "JWT token obtained from login endpoint",
      "scope": "user - can only access own wedding dashboard data"
    },
    "error_handling": {
      "common_errors": {
        "401": "Unauthorized - Invalid or missing authentication token",
        "403": "Forbidden - User can only access their own dashboard data",
        "404": "Not Found - User or resource not found",
        "422": "Unprocessable Entity - Invalid query parameters",
        "500": "Internal Server Error - Server error"
      },
      "parameter_validation": {
        "user_id": "Must be numeric and exist in users table",
        "period": "Must be one of: 7d, 30d, 90d, 1y",
        "start_date/end_date": "Must be valid date in YYYY-MM-DD format",
        "page": "Must be positive integer",
        "per_page": "Must be integer between 1-50"
      }
    },
    "usage_examples": {
      "dashboard_widget": {
        "description": "React dashboard component example",
        "code": "import React, { useState, useEffect } from 'react';\n\nconst DashboardWidget = ({ userId, token }) => {\n  const [overview, setOverview] = useState(null);\n  const [trends, setTrends] = useState(null);\n  const [messages, setMessages] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchDashboardData = async () => {\n      try {\n        const headers = {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        };\n\n        // Fetch overview data\n        const overviewRes = await fetch(`/api/v1/dashboard/overview/${userId}?period=30d`, { headers });\n        const overviewData = await overviewRes.json();\n\n        // Fetch trends data\n        const trendsRes = await fetch(`/api/v1/dashboard/trends/${userId}?period=7d`, { headers });\n        const trendsData = await trendsRes.json();\n\n        // Fetch recent messages\n        const messagesRes = await fetch(`/api/v1/dashboard/messages/${userId}?per_page=5`, { headers });\n        const messagesData = await messagesRes.json();\n\n        setOverview(overviewData.data);\n        setTrends(trendsData.data);\n        setMessages(messagesData.data);\n      } catch (error) {\n        console.error('Dashboard fetch error:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchDashboardData();\n  }, [userId, token]);\n\n  if (loading) return <div>Loading dashboard...</div>;\n\n  return (\n    <div className=\"dashboard\">\n      {/* Metrics Cards */}\n      <div className=\"metrics-grid\">\n        <MetricCard \n          title=\"Pengunjung\" \n          value={overview?.metrics?.pengunjung?.total}\n          growth={overview?.metrics?.pengunjung?.growth}\n        />\n        <MetricCard \n          title=\"Kehadiran\" \n          value={overview?.metrics?.kehadiran?.total}\n          growth={overview?.metrics?.kehadiran?.growth}\n        />\n        <MetricCard \n          title=\"Pesan\" \n          value={overview?.metrics?.pesan?.total}\n          growth={overview?.metrics?.pesan?.growth}\n        />\n        <MetricCard \n          title=\"Hadiah\" \n          value={overview?.metrics?.hadiah?.total}\n          growth={overview?.metrics?.hadiah?.growth}\n        />\n      </div>\n\n      {/* Trends Chart */}\n      <div className=\"trends-chart\">\n        <TrendsChart data={trends?.trends} />\n      </div>\n\n      {/* Recent Messages */}\n      <div className=\"recent-messages\">\n        <h3>Recent Messages</h3>\n        {messages?.messages?.map(message => (\n          <div key={message.id} className=\"message-item\">\n            <div className=\"message-header\">\n              <span className=\"name\">{message.nama}</span>\n              <span className={`status ${message.kehadiran}`}>\n                {message.kehadiran_label}\n              </span>\n              <span className=\"time\">{message.created_at_human}</span>\n            </div>\n            <p className=\"message-text\">{message.pesan}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst MetricCard = ({ title, value, growth }) => (\n  <div className=\"metric-card\">\n    <h4>{title}</h4>\n    <div className=\"value\">{value}</div>\n    <div className={`growth ${growth > 0 ? 'positive' : growth < 0 ? 'negative' : 'neutral'}`}>\n      {growth > 0 ? '↑' : growth < 0 ? '↓' : '→'} {Math.abs(growth)}%\n    </div>\n  </div>\n);\n\nexport default DashboardWidget;"
      },
      "chart_integration": {
        "description": "Chart.js integration for trends visualization",
        "code": "// Chart.js Trends Chart Component\nimport { Line } from 'react-chartjs-2';\n\nconst TrendsChart = ({ trendsData }) => {\n  const chartData = {\n    labels: trendsData?.map(item => {\n      const date = new Date(item.date);\n      return date.toLocaleDateString('id-ID', { month: 'short', day: 'numeric' });\n    }) || [],\n    datasets: [\n      {\n        label: 'Pengunjung',\n        data: trendsData?.map(item => item.pengunjung) || [],\n        borderColor: 'rgb(75, 192, 192)',\n        backgroundColor: 'rgba(75, 192, 192, 0.2)',\n        tension: 0.1\n      },\n      {\n        label: 'Kehadiran',\n        data: trendsData?.map(item => item.kehadiran) || [],\n        borderColor: 'rgb(255, 99, 132)',\n        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n        tension: 0.1\n      },\n      {\n        label: 'Pesan',\n        data: trendsData?.map(item => item.pesan) || [],\n        borderColor: 'rgb(54, 162, 235)',\n        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n        tension: 0.1\n      }\n    ]\n  };\n\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top',\n      },\n      title: {\n        display: true,\n        text: 'Wedding Analytics Trends'\n      }\n    },\n    scales: {\n      y: {\n        beginAtZero: true\n      }\n    }\n  };\n\n  return <Line data={chartData} options={options} />;\n};"
      }
    },
    "rate_limiting": {
      "description": "API rate limiting guidelines",
      "limits": {
        "requests_per_minute": 60,
        "requests_per_hour": 1000,
        "burst_limit": 10
      },
      "headers": {
        "X-RateLimit-Limit": "Requests allowed per window",
        "X-RateLimit-Remaining": "Requests remaining in current window",
        "X-RateLimit-Reset": "Time when rate limit resets"
      }
    },
    "notes": {
      "security": "All endpoints require authentication and user can only access their own data",
      "caching": "Dashboard data is cached for 5 minutes to improve performance",
      "real_time": "For real-time updates, consider implementing WebSocket connections",
      "performance": "Use pagination for large datasets and implement infinite scroll for better UX"
    }
  }
}
