{
  "api_documentation": {
    "title": "Testimonis (Reviews) API Documentation",
    "version": "1.0.0",
    "base_url": "http://127.0.0.1:8000/api",
    "description": "API endpoints for managing user testimonials and reviews for the wedding platform",
    "authentication": "Bearer Token Required",
    "content_type": "application/json",
    "database_schema": {
      "table": "testimonis",
      "fields": {
        "id": "Primary key (auto-increment)",
        "user_id": "Foreign key to users table",
        "kota": "City name (string)",
        "provinsi": "Province name (string)", 
        "ulasan": "Review text (text)",
        "status": "Approval status (boolean, default: false)",
        "created_at": "Creation timestamp",
        "updated_at": "Last update timestamp"
      },
      "relationships": {
        "user": "belongsTo(User::class) - Testimoni belongs to a User"
      }
    },
    "endpoints": {
      "admin_list_testimonis": {
        "method": "GET",
        "url": "/v1/admin/testimoni",
        "description": "Retrieve paginated list of testimonials for admin review",
        "authentication": "Required (Bearer Token + Admin Role)",
        "middleware": ["auth:sanctum", "role:admin"],
        "parameters": {
          "search": {
            "type": "string",
            "required": false,
            "location": "query",
            "description": "Search in provinsi or ulasan fields",
            "example": "Jakarta"
          },
          "limit": {
            "type": "integer",
            "required": false,
            "location": "query",
            "default": 10,
            "description": "Number of items per page",
            "example": 15
          },
          "page": {
            "type": "integer",
            "required": false,
            "location": "query",
            "default": 1,
            "description": "Page number for pagination",
            "example": 1
          }
        },
        "responses": {
          "200": {
            "description": "Testimonials retrieved successfully",
            "example": {
              "data": [
                {
                  "id": 1,
                  "user": {
                    "id": 4,
                    "name": "John Doe",
                    "email": "john@example.com"
                  },
                  "provinsi": "DKI Jakarta",
                  "ulasan": "Layanan sangat memuaskan, terima kasih!",
                  "status": true
                },
                {
                  "id": 2,
                  "user": {
                    "id": 5,
                    "name": "Jane Smith",
                    "email": "jane@example.com"
                  },
                  "provinsi": "Jawa Barat",
                  "ulasan": "Website undangan yang sangat bagus dan mudah digunakan.",
                  "status": false
                }
              ],
              "links": {
                "first": "http://127.0.0.1:8000/api/v1/admin/testimoni?page=1",
                "last": "http://127.0.0.1:8000/api/v1/admin/testimoni?page=5",
                "prev": null,
                "next": "http://127.0.0.1:8000/api/v1/admin/testimoni?page=2"
              },
              "meta": {
                "current_page": 1,
                "from": 1,
                "last_page": 5,
                "per_page": 10,
                "to": 10,
                "total": 45
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "403": {
            "description": "Forbidden - Admin role required",
            "example": {
              "message": "This action is unauthorized."
            }
          }
        },
        "example_request": {
          "curl": "curl -X GET 'http://127.0.0.1:8000/api/v1/admin/testimoni?search=Jakarta&limit=15' \\\n  -H 'Authorization: Bearer your_admin_token_here' \\\n  -H 'Accept: application/json'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/admin/testimoni?search=Jakarta&limit=15', {\n  headers: {\n    'Authorization': 'Bearer ' + adminToken,\n    'Accept': 'application/json'\n  }\n});"
        }
      },
      "admin_update_status": {
        "method": "PUT",
        "url": "/v1/admin/testimoni/{id}/update-status",
        "description": "Update approval status of a testimonial",
        "authentication": "Required (Bearer Token + Admin Role)",
        "middleware": ["auth:sanctum", "role:admin"],
        "parameters": {
          "id": {
            "type": "integer",
            "required": true,
            "location": "path",
            "description": "Testimonial ID",
            "example": 1
          },
          "status": {
            "type": "boolean",
            "required": true,
            "location": "body",
            "description": "Approval status (true = approved, false = rejected)",
            "example": true
          }
        },
        "request_body": {
          "content_type": "application/json",
          "example": {
            "status": true
          }
        },
        "responses": {
          "200": {
            "description": "Status updated successfully",
            "example": {
              "message": "Status berhasil diperbarui.",
              "testimoni": {
                "id": 1,
                "user_id": 4,
                "kota": "Jakarta Selatan",
                "provinsi": "DKI Jakarta",
                "ulasan": "Layanan sangat memuaskan, terima kasih!",
                "status": true,
                "created_at": "2025-08-30T10:30:45.000000Z",
                "updated_at": "2025-08-30T14:20:15.000000Z"
              }
            }
          },
          "404": {
            "description": "Testimonial not found",
            "example": {
              "message": "Data tidak ditemukan."
            }
          },
          "422": {
            "description": "Validation error",
            "example": {
              "message": "The status field is required.",
              "errors": {
                "status": ["The status field is required."]
              }
            }
          }
        },
        "example_request": {
          "curl": "curl -X PUT 'http://127.0.0.1:8000/api/v1/admin/testimoni/1/update-status' \\\n  -H 'Authorization: Bearer your_admin_token_here' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\"status\": true}'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/admin/testimoni/1/update-status', {\n  method: 'PUT',\n  headers: {\n    'Authorization': 'Bearer ' + adminToken,\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  body: JSON.stringify({ status: true })\n});"
        }
      },
      "admin_delete_all": {
        "method": "DELETE",
        "url": "/v1/admin/testimoni/delete-all",
        "description": "Delete all testimonials (DANGEROUS OPERATION)",
        "authentication": "Required (Bearer Token + Admin Role)",
        "middleware": ["auth:sanctum", "role:admin"],
        "security_warning": "This endpoint permanently deletes ALL testimonials. Use with extreme caution.",
        "responses": {
          "200": {
            "description": "All testimonials deleted successfully",
            "example": {
              "message": "Semua data berhasil dihapus."
            }
          },
          "404": {
            "description": "No testimonials to delete",
            "example": {
              "message": "Tidak ada data untuk dihapus."
            }
          },
          "401": {
            "description": "Unauthorized",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "403": {
            "description": "Forbidden - Admin role required",
            "example": {
              "message": "This action is unauthorized."
            }
          }
        },
        "example_request": {
          "curl": "curl -X DELETE 'http://127.0.0.1:8000/api/v1/admin/testimoni/delete-all' \\\n  -H 'Authorization: Bearer your_admin_token_here' \\\n  -H 'Accept: application/json'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/admin/testimoni/delete-all', {\n  method: 'DELETE',\n  headers: {\n    'Authorization': 'Bearer ' + adminToken,\n    'Accept': 'application/json'\n  }\n});"
        }
      },
      "admin_delete_by_id": {
        "method": "DELETE",
        "url": "/v1/admin/testimoni/{id}",
        "description": "Delete a specific testimonial by ID",
        "authentication": "Required (Bearer Token + Admin Role)",
        "middleware": ["auth:sanctum", "role:admin"],
        "parameters": {
          "id": {
            "type": "integer",
            "required": true,
            "location": "path",
            "description": "Testimonial ID to delete",
            "example": 1
          }
        },
        "responses": {
          "200": {
            "description": "Testimonial deleted successfully",
            "example": {
              "message": "Data berhasil dihapus."
            }
          },
          "404": {
            "description": "Testimonial not found",
            "example": {
              "message": "Data tidak ditemukan."
            }
          },
          "401": {
            "description": "Unauthorized",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "403": {
            "description": "Forbidden - Admin role required",
            "example": {
              "message": "This action is unauthorized."
            }
          }
        },
        "example_request": {
          "curl": "curl -X DELETE 'http://127.0.0.1:8000/api/v1/admin/testimoni/1' \\\n  -H 'Authorization: Bearer your_admin_token_here' \\\n  -H 'Accept: application/json'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/admin/testimoni/1', {\n  method: 'DELETE',\n  headers: {\n    'Authorization': 'Bearer ' + adminToken,\n    'Accept': 'application/json'\n  }\n});"
        }
      },
      "admin_result_testimoni": {
        "method": "GET",
        "url": "/v1/admin/result-testimoni",
        "description": "Get testimonial results (Alternative admin endpoint - functionality unclear)",
        "authentication": "Required (Bearer Token + Admin Role)",
        "middleware": ["auth:sanctum", "role:admin"],
        "note": "This endpoint exists in routes but implementation details need verification",
        "responses": {
          "200": {
            "description": "Results retrieved successfully",
            "example": "Response format depends on actual implementation"
          }
        }
      },
      "user_create_testimoni": {
        "method": "POST",
        "url": "/v1/user/post-testimoni",
        "description": "Create a new testimonial (User endpoint)",
        "authentication": "Required (Bearer Token + User Role)",
        "middleware": ["auth:sanctum", "role:user"],
        "parameters": {
          "kota": {
            "type": "string",
            "required": true,
            "location": "body",
            "validation": "min:3",
            "description": "City name",
            "example": "Jakarta Selatan"
          },
          "provinsi": {
            "type": "string",
            "required": true,
            "location": "body",
            "validation": "min:3",
            "description": "Province name",
            "example": "DKI Jakarta"
          },
          "ulasan": {
            "type": "string",
            "required": true,
            "location": "body",
            "validation": "min:3",
            "description": "Review text",
            "example": "Layanan sangat memuaskan, website undangan mudah digunakan dan hasilnya bagus!"
          }
        },
        "request_body": {
          "content_type": "application/json",
          "example": {
            "kota": "Jakarta Selatan",
            "provinsi": "DKI Jakarta",
            "ulasan": "Layanan sangat memuaskan, website undangan mudah digunakan dan hasilnya bagus!"
          }
        },
        "responses": {
          "200": {
            "description": "Testimonial created successfully",
            "example": {
              "Message": "Terimakasih anda sudah mengisi ulasannya",
              "testimoni": {
                "id": 1,
                "user_id": 4,
                "kota": "Jakarta Selatan",
                "provinsi": "DKI Jakarta",
                "ulasan": "Layanan sangat memuaskan, website undangan mudah digunakan dan hasilnya bagus!",
                "status": false,
                "created_at": "2025-08-30T10:30:45.000000Z",
                "updated_at": "2025-08-30T10:30:45.000000Z"
              }
            }
          },
          "422": {
            "description": "Validation error",
            "example": {
              "message": "The kota field is required.",
              "errors": {
                "kota": ["The kota field is required."],
                "provinsi": ["The provinsi field is required."],
                "ulasan": ["The ulasan field is required."]
              }
            }
          },
          "500": {
            "description": "Server error during creation",
            "example": {
              "Message": "Ulasan anda gagal dikirimkan!"
            }
          },
          "401": {
            "description": "Unauthorized",
            "example": {
              "message": "Unauthenticated."
            }
          },
          "403": {
            "description": "Forbidden - User role required",
            "example": {
              "message": "This action is unauthorized."
            }
          }
        },
        "example_request": {
          "curl": "curl -X POST 'http://127.0.0.1:8000/api/v1/user/post-testimoni' \\\n  -H 'Authorization: Bearer your_user_token_here' \\\n  -H 'Content-Type: application/json' \\\n  -H 'Accept: application/json' \\\n  -d '{\n    \"kota\": \"Jakarta Selatan\",\n    \"provinsi\": \"DKI Jakarta\",\n    \"ulasan\": \"Layanan sangat memuaskan!\"\n  }'",
          "javascript": "const response = await fetch('http://127.0.0.1:8000/api/v1/user/post-testimoni', {\n  method: 'POST',\n  headers: {\n    'Authorization': 'Bearer ' + userToken,\n    'Content-Type': 'application/json',\n    'Accept': 'application/json'\n  },\n  body: JSON.stringify({\n    kota: 'Jakarta Selatan',\n    provinsi: 'DKI Jakarta',\n    ulasan: 'Layanan sangat memuaskan!'\n  })\n});"
        }
      }
    },
    "data_types": {
      "testimoni_object": {
        "description": "Testimonial data structure",
        "properties": {
          "id": "integer - Unique identifier",
          "user_id": "integer - Foreign key to users table",
          "kota": "string - City name",
          "provinsi": "string - Province name",
          "ulasan": "string - Review text",
          "status": "boolean - Approval status (false = pending, true = approved)",
          "created_at": "string - ISO 8601 timestamp",
          "updated_at": "string - ISO 8601 timestamp"
        }
      },
      "user_object": {
        "description": "User data structure in testimonial response",
        "properties": {
          "id": "integer - User ID",
          "name": "string - User full name",
          "email": "string - User email address"
        }
      },
      "pagination_meta": {
        "description": "Laravel pagination metadata",
        "properties": {
          "current_page": "integer - Current page number",
          "from": "integer - First item number on current page",
          "last_page": "integer - Last page number",
          "per_page": "integer - Items per page",
          "to": "integer - Last item number on current page",
          "total": "integer - Total number of items"
        }
      }
    },
    "authentication": {
      "type": "Bearer Token",
      "header": "Authorization: Bearer {token}",
      "description": "All endpoints require authentication with appropriate role",
      "roles": {
        "admin": "Can manage all testimonials (view, approve, delete)",
        "user": "Can create testimonials only"
      },
      "token_format": "JWT token obtained from login endpoint"
    },
    "error_handling": {
      "common_errors": {
        "401": "Unauthorized - Invalid or missing authentication token",
        "403": "Forbidden - Insufficient permissions for requested action",
        "404": "Not Found - Testimonial or resource not found",
        "422": "Unprocessable Entity - Validation errors in request data",
        "500": "Internal Server Error - Server error during processing"
      },
      "validation_rules": {
        "kota": "Required, minimum 3 characters",
        "provinsi": "Required, minimum 3 characters",
        "ulasan": "Required, minimum 3 characters, maximum length not specified",
        "status": "Required boolean for admin status updates"
      }
    },
    "missing_endpoints": {
      "description": "Standard CRUD operations that should be implemented for complete functionality",
      "recommended_additions": [
        {
          "endpoint": "GET /v1/user/testimoni",
          "description": "List user's own testimonials",
          "purpose": "Allow users to view their submitted reviews"
        },
        {
          "endpoint": "GET /v1/user/testimoni/{id}",
          "description": "Show specific user testimonial",
          "purpose": "View details of user's own testimonial"
        },
        {
          "endpoint": "PUT /v1/user/testimoni/{id}",
          "description": "Update user's own testimonial",
          "purpose": "Allow users to edit their reviews before approval"
        },
        {
          "endpoint": "DELETE /v1/user/testimoni/{id}",
          "description": "Delete user's own testimonial",
          "purpose": "Allow users to remove their own reviews"
        },
        {
          "endpoint": "GET /v1/public/testimoni",
          "description": "Public approved testimonials",
          "purpose": "Display approved testimonials on public pages"
        }
      ]
    },
    "code_quality_issues": {
      "description": "Current implementation violates Laravel best practices",
      "issues": [
        {
          "issue": "Missing Form Request Classes",
          "impact": "Validation logic mixed in controller",
          "recommendation": "Create StoreTestimoniRequest and UpdateTestimoniRequest"
        },
        {
          "issue": "Inconsistent Response Format",
          "impact": "Different response structures across endpoints",
          "recommendation": "Standardize API responses using Resources consistently"
        },
        {
          "issue": "Security Vulnerability in deleteAll",
          "impact": "No confirmation or additional authorization for destructive operation",
          "recommendation": "Add confirmation parameter and enhanced authorization"
        },
        {
          "issue": "Missing Rate Limiting",
          "impact": "No protection against spam testimonial submissions",
          "recommendation": "Add rate limiting middleware to user endpoints"
        },
        {
          "issue": "Inadequate Error Handling",
          "impact": "Generic error messages, poor debugging capability",
          "recommendation": "Implement proper exception handling and logging"
        },
        {
          "issue": "No Soft Deletes",
          "impact": "Permanent data loss without recovery possibility",
          "recommendation": "Implement soft deletes for testimonials"
        }
      ]
    },
    "frontend_integration": {
      "description": "Frontend implementation guidelines",
      "admin_panel": {
        "testimonial_management": {
          "list_view": "Implement pagination, search, and status filtering",
          "approval_workflow": "Provide approve/reject buttons with status update",
          "bulk_operations": "Consider bulk approval/rejection functionality",
          "delete_confirmation": "Always require confirmation for delete operations"
        }
      },
      "user_dashboard": {
        "testimonial_submission": {
          "form_validation": "Implement client-side validation matching API rules",
          "status_tracking": "Show submission status (pending/approved/rejected)",
          "edit_capability": "Allow editing of pending testimonials only"
        }
      },
      "public_display": {
        "testimonial_showcase": {
          "approved_only": "Display only approved testimonials",
          "pagination": "Implement infinite scroll or pagination",
          "location_display": "Show city and province information"
        }
      }
    },
    "usage_examples": {
      "react_admin_component": {
        "description": "React component for admin testimonial management",
        "code": "import React, { useState, useEffect } from 'react';\n\nconst TestimonialAdmin = ({ token }) => {\n  const [testimonials, setTestimonials] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [search, setSearch] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n\n  useEffect(() => {\n    fetchTestimonials();\n  }, [currentPage, search]);\n\n  const fetchTestimonials = async () => {\n    try {\n      const params = new URLSearchParams({\n        page: currentPage,\n        limit: 10,\n        ...(search && { search })\n      });\n      \n      const response = await fetch(`/api/v1/admin/testimoni?${params}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      });\n      \n      const data = await response.json();\n      setTestimonials(data);\n    } catch (error) {\n      console.error('Error fetching testimonials:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateStatus = async (id, status) => {\n    try {\n      const response = await fetch(`/api/v1/admin/testimoni/${id}/update-status`, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify({ status })\n      });\n      \n      if (response.ok) {\n        fetchTestimonials(); // Refresh list\n      }\n    } catch (error) {\n      console.error('Error updating status:', error);\n    }\n  };\n\n  const deleteTestimonial = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this testimonial?')) {\n      return;\n    }\n    \n    try {\n      const response = await fetch(`/api/v1/admin/testimoni/${id}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Accept': 'application/json'\n        }\n      });\n      \n      if (response.ok) {\n        fetchTestimonials(); // Refresh list\n      }\n    } catch (error) {\n      console.error('Error deleting testimonial:', error);\n    }\n  };\n\n  if (loading) return <div>Loading testimonials...</div>;\n\n  return (\n    <div className=\"testimonial-admin\">\n      <div className=\"search-bar\">\n        <input\n          type=\"text\"\n          placeholder=\"Search testimonials...\"\n          value={search}\n          onChange={(e) => setSearch(e.target.value)}\n        />\n      </div>\n      \n      <div className=\"testimonial-list\">\n        {testimonials.data?.map(testimonial => (\n          <div key={testimonial.id} className=\"testimonial-item\">\n            <div className=\"testimonial-header\">\n              <h4>{testimonial.user.name}</h4>\n              <span className={`status ${testimonial.status ? 'approved' : 'pending'}`}>\n                {testimonial.status ? 'Approved' : 'Pending'}\n              </span>\n            </div>\n            <p><strong>Location:</strong> {testimonial.provinsi}</p>\n            <p><strong>Review:</strong> {testimonial.ulasan}</p>\n            <div className=\"actions\">\n              <button \n                onClick={() => updateStatus(testimonial.id, true)}\n                disabled={testimonial.status}\n              >\n                Approve\n              </button>\n              <button \n                onClick={() => updateStatus(testimonial.id, false)}\n                disabled={!testimonial.status}\n              >\n                Reject\n              </button>\n              <button \n                onClick={() => deleteTestimonial(testimonial.id)}\n                className=\"delete-btn\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n      \n      <div className=\"pagination\">\n        {/* Implement pagination controls based on testimonials.meta */}\n      </div>\n    </div>\n  );\n};\n\nexport default TestimonialAdmin;"
      },
      "user_testimonial_form": {
        "description": "React form component for user testimonial submission",
        "code": "import React, { useState } from 'react';\n\nconst TestimonialForm = ({ token, onSubmitSuccess }) => {\n  const [formData, setFormData] = useState({\n    kota: '',\n    provinsi: '',\n    ulasan: ''\n  });\n  const [errors, setErrors] = useState({});\n  const [submitting, setSubmitting] = useState(false);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    setSubmitting(true);\n    setErrors({});\n\n    try {\n      const response = await fetch('/api/v1/user/post-testimoni', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n\n      const data = await response.json();\n\n      if (response.ok) {\n        // Success\n        setFormData({ kota: '', provinsi: '', ulasan: '' });\n        onSubmitSuccess?.(data);\n        alert('Testimonial submitted successfully!');\n      } else if (response.status === 422) {\n        // Validation errors\n        setErrors(data.errors || {});\n      } else {\n        alert('Error submitting testimonial. Please try again.');\n      }\n    } catch (error) {\n      console.error('Error submitting testimonial:', error);\n      alert('Network error. Please try again.');\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n    // Clear error when user starts typing\n    if (errors[name]) {\n      setErrors(prev => ({ ...prev, [name]: null }));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"testimonial-form\">\n      <div className=\"form-group\">\n        <label htmlFor=\"kota\">City *</label>\n        <input\n          type=\"text\"\n          id=\"kota\"\n          name=\"kota\"\n          value={formData.kota}\n          onChange={handleChange}\n          required\n          minLength={3}\n        />\n        {errors.kota && <span className=\"error\">{errors.kota[0]}</span>}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"provinsi\">Province *</label>\n        <input\n          type=\"text\"\n          id=\"provinsi\"\n          name=\"provinsi\"\n          value={formData.provinsi}\n          onChange={handleChange}\n          required\n          minLength={3}\n        />\n        {errors.provinsi && <span className=\"error\">{errors.provinsi[0]}</span>}\n      </div>\n\n      <div className=\"form-group\">\n        <label htmlFor=\"ulasan\">Your Review *</label>\n        <textarea\n          id=\"ulasan\"\n          name=\"ulasan\"\n          value={formData.ulasan}\n          onChange={handleChange}\n          required\n          minLength={3}\n          rows={4}\n          placeholder=\"Share your experience with our wedding platform...\"\n        />\n        {errors.ulasan && <span className=\"error\">{errors.ulasan[0]}</span>}\n      </div>\n\n      <button type=\"submit\" disabled={submitting}>\n        {submitting ? 'Submitting...' : 'Submit Testimonial'}\n      </button>\n    </form>\n  );\n};\n\nexport default TestimonialForm;"
      }
    },
    "rate_limiting": {
      "description": "Recommended rate limiting for testimonial endpoints",
      "user_endpoints": {
        "POST /v1/user/post-testimoni": "1 submission per minute, 5 per hour to prevent spam"
      },
      "admin_endpoints": {
        "general": "60 requests per minute for admin operations"
      }
    },
    "notes": {
      "security": "Admin endpoints have elevated privileges - ensure proper role validation",
      "performance": "Consider caching approved testimonials for public display",
      "localization": "City and province names should be validated against Indonesian location data",
      "content_moderation": "Implement automated content filtering for inappropriate language",
      "notification": "Consider email notifications for testimonial status changes"
    }
  }
}