{
  "apiName": "Wedding Profile with Integrated Music Streaming",
  "version": "1.1.0",
  "description": "Enhanced wedding profile API that includes music streaming URL in the response for seamless frontend integration",
  "baseUrl": "https://your-domain.com/api",
  "integration": {
    "weddingProfileEndpoint": {
      "method": "GET",
      "path": "/v1/wedding-profile/couple/{domain}",
      "description": "Get wedding profile data with integrated music streaming URL",
      "authentication": "None (Public access)",
      "parameters": {
        "path": {
          "domain": {
            "type": "string",
            "required": true,
            "description": "Wedding domain/slug",
            "example": "domainkuasna"
          }
        }
      },
      "response": {
        "200": {
          "description": "Wedding profile with music streaming integration",
          "structure": {
            "data": {
              "user_info": "User basic information",
              "mempelai": "Bride and groom details with photos",
              "invitation_package": "Wedding package information",
              "events": "Wedding events and countdown",
              "stories": "Love story content",
              "quotes": "Wedding quotes",
              "gallery": "Wedding photos and videos",
              "bank_accounts": "Payment information",
              "settings": {
                "id": "integer - Setting ID",
                "domain": "string - Wedding domain",
                "musik": "string|null - Legacy music file URL",
                "music_stream_url": "string|null - NEW: Direct streaming URL",
                "music_info": {
                  "has_music": "boolean - Whether music is available",
                  "supports_streaming": "boolean - Streaming capability",
                  "supports_range_requests": "boolean - Progressive loading support",
                  "format_support": "array - Supported audio formats"
                },
                "salam_pembuka": "string - Opening greeting",
                "salam_atas": "string - Top greeting",
                "salam_bawah": "string - Bottom greeting"
              },
              "filter_undangan": "Page visibility settings",
              "guest_wishes": "Wedding wishes from guests",
              "guest_book": "Guest book entries",
              "testimonials": "User testimonials",
              "themes": "Wedding theme information",
              "metadata": "Additional metadata"
            }
          },
          "example": {
            "data": {
              "user_info": {
                "id": 123,
                "name": "John & Jane",
                "email": "couple@example.com",
                "phone": "+6281234567890",
                "kode_pemesanan": "INV001"
              },
              "settings": {
                "id": 456,
                "domain": "domainkuasna",
                "musik": "/storage/music/1234567890_wedding-song.mp3",
                "music_stream_url": "https://your-domain.com/api/v1/music/stream/public?id=456",
                "music_info": {
                  "has_music": true,
                  "supports_streaming": true,
                  "supports_range_requests": true,
                  "format_support": ["mp3", "wav", "ogg", "m4a"]
                },
                "salam_pembuka": "Dengan memohon ridho Allah SWT",
                "salam_atas": "Bismillahirrahmanirrahim",
                "salam_bawah": "Wassalamualaikum warahmatullahi wabarakatuh"
              }
            }
          }
        },
        "404": {
          "description": "Wedding profile not found",
          "example": {
            "message": "Wedding profile not found for this domain."
          }
        },
        "403": {
          "description": "Invitation not ready for public viewing",
          "example": {
            "message": "Wedding invitation is not yet available for public viewing."
          }
        }
      }
    }
  },
  "frontend_implementation": {
    "react_example": {
      "description": "Complete React component for wedding invitation with music",
      "code": "import React, { useState, useEffect, useRef } from 'react';\nimport axios from 'axios';\n\nconst WeddingInvitation = ({ domain }) => {\n  const [weddingData, setWeddingData] = useState(null);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const audioRef = useRef(null);\n\n  useEffect(() => {\n    fetchWeddingData();\n  }, [domain]);\n\n  const fetchWeddingData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get(`/api/v1/wedding-profile/couple/${domain}`);\n      setWeddingData(response.data.data);\n      \n      // Initialize music if available\n      if (response.data.data.settings?.music_stream_url) {\n        initializeMusic(response.data.data.settings.music_stream_url);\n      }\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to load wedding data');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const initializeMusic = (streamUrl) => {\n    if (audioRef.current) {\n      audioRef.current.src = streamUrl;\n      audioRef.current.preload = 'none';\n    }\n  };\n\n  const toggleMusic = () => {\n    if (!audioRef.current || !weddingData?.settings?.music_stream_url) return;\n\n    if (isPlaying) {\n      audioRef.current.pause();\n    } else {\n      audioRef.current.play().catch(console.error);\n    }\n    setIsPlaying(!isPlaying);\n  };\n\n  const handleAudioEvents = () => {\n    if (!audioRef.current) return;\n    \n    audioRef.current.addEventListener('play', () => setIsPlaying(true));\n    audioRef.current.addEventListener('pause', () => setIsPlaying(false));\n    audioRef.current.addEventListener('ended', () => setIsPlaying(false));\n  };\n\n  useEffect(() => {\n    handleAudioEvents();\n    return () => {\n      if (audioRef.current) {\n        audioRef.current.removeEventListener('play', () => setIsPlaying(true));\n        audioRef.current.removeEventListener('pause', () => setIsPlaying(false));\n        audioRef.current.removeEventListener('ended', () => setIsPlaying(false));\n      }\n    };\n  }, []);\n\n  if (loading) return <div className=\"loading\">Loading wedding invitation...</div>;\n  if (error) return <div className=\"error\">Error: {error}</div>;\n  if (!weddingData) return <div className=\"error\">Wedding data not found</div>;\n\n  const { mempelai, settings, events, gallery } = weddingData;\n\n  return (\n    <div className=\"wedding-invitation\">\n      {/* Music Player */}\n      {settings?.music_info?.has_music && (\n        <>\n          <audio ref={audioRef} loop />\n          <button \n            className=\"music-toggle\"\n            onClick={toggleMusic}\n            style={{\n              position: 'fixed',\n              top: '20px',\n              right: '20px',\n              zIndex: 1000,\n              background: isPlaying ? '#e74c3c' : '#27ae60',\n              color: 'white',\n              border: 'none',\n              borderRadius: '50%',\n              width: '50px',\n              height: '50px',\n              cursor: 'pointer'\n            }}\n          >\n            {isPlaying ? '‚è∏Ô∏è' : 'üéµ'}\n          </button>\n        </>\n      )}\n\n      {/* Wedding Cover */}\n      <section className=\"cover\">\n        {mempelai?.cover_photo && (\n          <img src={mempelai.cover_photo} alt=\"Wedding Cover\" />\n        )}\n        <h1>{mempelai?.pria?.nama_panggilan} & {mempelai?.wanita?.nama_panggilan}</h1>\n        {settings?.salam_atas && <p className=\"greeting\">{settings.salam_atas}</p>}\n      </section>\n\n      {/* Bride & Groom */}\n      <section className=\"couple\">\n        <div className=\"bride\">\n          <img src={mempelai?.wanita?.photo} alt={mempelai?.wanita?.nama_lengkap} />\n          <h3>{mempelai?.wanita?.nama_lengkap}</h3>\n          <p>Putri dari {mempelai?.wanita?.ayah} & {mempelai?.wanita?.ibu}</p>\n        </div>\n        <div className=\"groom\">\n          <img src={mempelai?.pria?.photo} alt={mempelai?.pria?.nama_lengkap} />\n          <h3>{mempelai?.pria?.nama_lengkap}</h3>\n          <p>Putra dari {mempelai?.pria?.ayah} & {mempelai?.pria?.ibu}</p>\n        </div>\n      </section>\n\n      {/* Wedding Events */}\n      <section className=\"events\">\n        <h2>Acara Pernikahan</h2>\n        {events?.map(event => (\n          <div key={event.id} className=\"event\">\n            <h3>{event.name}</h3>\n            <p>{event.tanggal_acara} | {event.waktu_acara}</p>\n            <p>{event.tempat_acara}</p>\n            <p>{event.alamat_acara}</p>\n          </div>\n        ))}\n      </section>\n\n      {/* Gallery */}\n      <section className=\"gallery\">\n        <h2>Gallery</h2>\n        <div className=\"gallery-grid\">\n          {gallery?.map(item => (\n            <div key={item.id} className=\"gallery-item\">\n              {item.photo && <img src={item.photo} alt={item.nama_foto} />}\n              {item.url_video && (\n                <video controls>\n                  <source src={item.url_video} type=\"video/mp4\" />\n                </video>\n              )}\n            </div>\n          ))}\n        </div>\n      </section>\n\n      {/* Bottom Greeting */}\n      {settings?.salam_bawah && (\n        <section className=\"closing\">\n          <p>{settings.salam_bawah}</p>\n        </section>\n      )}\n    </div>\n  );\n};\n\nexport default WeddingInvitation;"
    },
    "vanilla_js_example": {
      "description": "Vanilla JavaScript implementation for wedding invitation",
      "code": "class WeddingInvitation {\n  constructor(domain, containerId) {\n    this.domain = domain;\n    this.container = document.getElementById(containerId);\n    this.weddingData = null;\n    this.audio = new Audio();\n    this.isPlaying = false;\n    \n    this.init();\n  }\n\n  async init() {\n    try {\n      await this.fetchWeddingData();\n      this.render();\n      this.initializeMusic();\n    } catch (error) {\n      this.renderError(error.message);\n    }\n  }\n\n  async fetchWeddingData() {\n    const response = await fetch(`/api/v1/wedding-profile/couple/${this.domain}`);\n    \n    if (!response.ok) {\n      throw new Error('Failed to load wedding data');\n    }\n    \n    const data = await response.json();\n    this.weddingData = data.data;\n  }\n\n  initializeMusic() {\n    const musicUrl = this.weddingData?.settings?.music_stream_url;\n    \n    if (musicUrl) {\n      this.audio.src = musicUrl;\n      this.audio.loop = true;\n      this.audio.preload = 'none';\n      \n      // Add event listeners\n      this.audio.addEventListener('play', () => {\n        this.isPlaying = true;\n        this.updateMusicButton();\n      });\n      \n      this.audio.addEventListener('pause', () => {\n        this.isPlaying = false;\n        this.updateMusicButton();\n      });\n    }\n  }\n\n  toggleMusic() {\n    if (!this.weddingData?.settings?.music_stream_url) return;\n    \n    if (this.isPlaying) {\n      this.audio.pause();\n    } else {\n      this.audio.play().catch(console.error);\n    }\n  }\n\n  updateMusicButton() {\n    const button = document.querySelector('.music-toggle');\n    if (button) {\n      button.textContent = this.isPlaying ? '‚è∏Ô∏è' : 'üéµ';\n      button.style.backgroundColor = this.isPlaying ? '#e74c3c' : '#27ae60';\n    }\n  }\n\n  render() {\n    const { mempelai, settings, events, gallery } = this.weddingData;\n    \n    let html = '';\n    \n    // Music button\n    if (settings?.music_info?.has_music) {\n      html += `\n        <button class=\"music-toggle\" onclick=\"weddingApp.toggleMusic()\" style=\"\n          position: fixed;\n          top: 20px;\n          right: 20px;\n          z-index: 1000;\n          background: #27ae60;\n          color: white;\n          border: none;\n          border-radius: 50%;\n          width: 50px;\n          height: 50px;\n          cursor: pointer;\n        \">üéµ</button>\n      `;\n    }\n    \n    // Cover section\n    html += `\n      <section class=\"cover\">\n        ${mempelai?.cover_photo ? `<img src=\"${mempelai.cover_photo}\" alt=\"Wedding Cover\">` : ''}\n        <h1>${mempelai?.pria?.nama_panggilan || ''} & ${mempelai?.wanita?.nama_panggilan || ''}</h1>\n        ${settings?.salam_atas ? `<p class=\"greeting\">${settings.salam_atas}</p>` : ''}\n      </section>\n    `;\n    \n    // Couple section\n    html += `\n      <section class=\"couple\">\n        <div class=\"bride\">\n          ${mempelai?.wanita?.photo ? `<img src=\"${mempelai.wanita.photo}\" alt=\"${mempelai.wanita.nama_lengkap}\">` : ''}\n          <h3>${mempelai?.wanita?.nama_lengkap || ''}</h3>\n          <p>Putri dari ${mempelai?.wanita?.ayah || ''} & ${mempelai?.wanita?.ibu || ''}</p>\n        </div>\n        <div class=\"groom\">\n          ${mempelai?.pria?.photo ? `<img src=\"${mempelai.pria.photo}\" alt=\"${mempelai.pria.nama_lengkap}\">` : ''}\n          <h3>${mempelai?.pria?.nama_lengkap || ''}</h3>\n          <p>Putra dari ${mempelai?.pria?.ayah || ''} & ${mempelai?.pria?.ibu || ''}</p>\n        </div>\n      </section>\n    `;\n    \n    this.container.innerHTML = html;\n  }\n\n  renderError(message) {\n    this.container.innerHTML = `<div class=\"error\">Error: ${message}</div>`;\n  }\n}\n\n// Usage\nconst weddingApp = new WeddingInvitation('domainkuasna', 'wedding-container');"
    }
  },
  "benefits": {
    "single_api_call": "Frontend gets both wedding data and music streaming URL in one request",
    "automatic_music_detection": "Frontend automatically knows if music is available",
    "progressive_streaming": "Music loads progressively while user views the invitation",
    "format_information": "Frontend knows supported audio formats",
    "streaming_capabilities": "Frontend knows if Range requests are supported",
    "seamless_integration": "No need for separate music metadata API calls"
  },
  "performance_optimizations": {
    "lazy_loading": "Audio preload='none' prevents automatic download",
    "range_requests": "Supports HTTP Range headers for partial content",
    "caching": "Music URLs include appropriate cache headers",
    "single_endpoint": "Reduces API calls from 2+ to 1"
  },
  "error_handling": {
    "no_music": {
      "description": "When no music is available",
      "response": {
        "music_stream_url": null,
        "music_info": {
          "has_music": false,
          "supports_streaming": false
        }
      }
    },
    "music_available": {
      "description": "When music is available for streaming",
      "response": {
        "music_stream_url": "https://domain.com/api/v1/music/stream/public?id=456",
        "music_info": {
          "has_music": true,
          "supports_streaming": true,
          "supports_range_requests": true,
          "format_support": ["mp3", "wav", "ogg", "m4a"]
        }
      }
    }
  },
  "testing": {
    "manual_tests": [
      {
        "test": "Wedding profile with music",
        "endpoint": "GET /v1/wedding-profile/couple/domainkuasna",
        "expected": "Response includes music_stream_url and music_info"
      },
      {
        "test": "Wedding profile without music", 
        "endpoint": "GET /v1/wedding-profile/couple/domain-no-music",
        "expected": "music_stream_url is null, has_music is false"
      },
      {
        "test": "Direct music streaming",
        "endpoint": "GET /v1/music/stream/public?id=456",
        "expected": "Audio stream with proper headers"
      },
      {
        "test": "Frontend integration",
        "description": "Load wedding page and verify music auto-plays",
        "steps": [
          "Open wedding invitation URL",
          "Verify music toggle button appears",
          "Click music button",
          "Verify audio starts streaming"
        ]
      }
    ]
  }
}